description = "Tapestry Extensions"

import javax.script.Invocable
import javax.script.ScriptContext
import javax.script.ScriptEngine
import javax.script.ScriptEngineManager
import javax.script.ScriptException


apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'

ext.versions =
        [slf4j: '1.7.14',
         tapestry: '5.4.0',
         selenium: '2.51.0']

ext.globalTestVersions =
        [spock: '1.0-groovy-2.4']

ext.packaging = 'jar'

idea {
  module {
    inheritOutputDirs = false
    outputDir = file("build/classes/main")
    testOutputDir = file('build/classes/test')

    downloadJavadoc = true
    downloadSources = true
  }
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

group = "de.eddyson"
version = "0.0.16-SNAPSHOT"

repositories {
  jcenter()
}

dependencies {
  compile "org.apache.tapestry:tapestry-core:$versions.tapestry"

  compile "org.slf4j:slf4j-api:$versions.slf4j"

  runtime "de.eddyson:tapestry-webjars:0.9.3"

  //Webjars
  runtime ('org.webjars.npm:select2:4.0.1'){
    exclude group: 'org.webjars.npm', module: 'almond'
    exclude group: 'org.webjars.npm', module: 'jquery-mousewheel'
  }

  testCompile 'de.eddyson:tapestry-geb:0.25.0'
  testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$versions.selenium"

  // Logback
  testRuntime "ch.qos.logback:logback-classic:1.1.3"

  testRuntime "org.apache.tapestry:tapestry-webresources:$versions.tapestry"

}


buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.webjars:coffee-script:1.10.0"
  }
}

tasks.withType(Test){
  systemProperties["tapestry.service-reloading-enabled"] = "false"
  systemProperties["tapestry.execution-mode"] = "test"
  systemProperty 'webappLocation', 'src/test/webapp'
  systemProperty 'jettyPort', 9040
  enableAssertions = true
}

test {
  systemProperties['SAUCE_USERNAME'] = System.env.SAUCE_USERNAME
  systemProperties['SAUCE_ACCESS_KEY'] = System.env.SAUCE_ACCESS_KEY
  systemProperties['TRAVIS_JOB_NUMBER'] = System.env.TRAVIS_JOB_NUMBER
  def gebenv
  if (System.properties['os.name'].toLowerCase().contains('windows')){
    gebenv = 'ie'
  } else if(System.properties['TRAVIS'] == 'true'){
    gebenv = 'travis'
    systemProperty 'jettyPort', 9876
    def gebSetting = System.properties['GEB_SAUCE_SETTING']
    if ( gebSetting == "ie"){
      gebenv = "sauce_ie"
    } else if (gebSetting == "safari"){
      gebenv = "sauce_safari"
    } else if (gebSetting == "chrome"){
      gebenv = "sauce_chrome"
    } else if (gebSetting == "ipad"){
      gebenv = "sauce_ipad"
    } else if (gebSetting == "firefox"){
      gebenv = "sauce_firefox"
    }
  } else {
    gebenv = 'firefox'
  }

  systemProperty 'geb.env', gebenv
}

@groovy.transform.TypeChecked
class CoffeeScriptCompilerReader extends FilterReader {

  static String compilerText = Thread.currentThread().contextClassLoader.getResourceAsStream('META-INF/resources/webjars/coffee-script/1.10.0/coffee-script.min.js').text

  CoffeeScriptCompilerReader(Reader r){
    super(createJavaScriptReader(r))
  }

  static Reader createJavaScriptReader(final Reader coffeeScriptReader) throws ScriptException {
      String coffee = coffeeScriptReader.text
      String compiled = compileCoffeeScript(coffee, true);
      return new StringReader(compiled);
  }

  static String compileCoffeeScript(String coffeeScript, boolean bare){
      new ScriptEngineManager().getEngineByMimeType("text/javascript").with {
        eval(CoffeeScriptCompilerReader.compilerText)
        Object params = eval(String.format("(function(){return {\"bare\":%s};}())", bare));
        Object cs = getContext().getBindings(ScriptContext.ENGINE_SCOPE).get("CoffeeScript");
        ((Invocable) delegate).invokeMethod(cs, "compile", coffeeScript, params)
      }
  }
}

new CoffeeScriptCompilerReader(new StringReader("foo"))

jar {
  manifest { attributes 'Tapestry-Module-Classes': 'de.eddyson.tapestry.extensions.modules.ExtensionsModule' }
  eachFile { f->
    if (f.sourceName ==~ /.*\.coffee$/){
      f.filter(CoffeeScriptCompilerReader)
      f.name = f.sourceName.replaceFirst(/\.coffee$/, '.js')
    }
  }
}

configure(install.repositories.mavenInstaller) {
  pom.project {
    inceptionYear '2015'
    packaging 'jar'
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives jar
  archives sourcesJar
}

// don't try to deploy SNAPSHOT versions in CI
tasks.findByName("artifactoryPublish")?.with { task ->
  if (version ==~ /.*-SNAPSHOT/){
    task.enabled = false
  }
}

task runTestApp(type:JavaExec) {
  main = 'org.apache.tapestry5.test.Jetty7Runner'
  args "-d", "src/test/webapp/", "-p", "9040"
  systemProperties["tapestry.execution-mode"] = "test"
  classpath = configurations.testRuntime + sourceSets.test.output + sourceSets.main.output
}
