description = "Tapestry Extensions"

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'

ext.versions =
        [slf4j: '1.7.12',
         tapestry: '5.4-beta-35',
         selenium: '2.47.1']

ext.globalTestVersions =
        [spock: '1.0-groovy-2.4']

ext.packaging = 'jar'

idea {
  module {
    inheritOutputDirs = false
    outputDir = file("build/classes/main")
    testOutputDir = file('build/classes/test')

    downloadJavadoc = true
    downloadSources = true
  }
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

group = "de.eddyson.tapestry"
version = "0.0.8-SNAPSHOT"

repositories {
  jcenter()
}

dependencies {
  compile "org.apache.tapestry:tapestry-core:$versions.tapestry"
  compile "org.slf4j:slf4j-api:$versions.slf4j"

  runtime "de.eddyson:tapestry-webjars:0.7.0"

  //Webjars
  runtime 'org.webjars:select2:4.0.0-2'

  testCompile 'de.eddyson:tapestry-geb:0.18.0'
  testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$versions.selenium"
  
  // Logback
  testRuntime "ch.qos.logback:logback-classic:1.1.3"

}


tasks.withType(Test){
  systemProperties["tapestry.service-reloading-enabled"] = "false"
  systemProperties["tapestry.execution-mode"] = "test"
  systemProperty 'webappLocation', 'src/test/webapp'
  systemProperty 'jettyPort', 9040
  enableAssertions = true
}

test {
  def gebenv
  if (System.properties['os.name'].toLowerCase().contains('windows')){
    gebenv = 'ie'
  }else {
    gebenv = 'firefox'
  }
  systemProperty 'geb.env', gebenv
}

jar {
  manifest { attributes 'Tapestry-Module-Classes': 'de.eddyson.tapestry.extensions.modules.ExtensionsModule' }
}

configure(install.repositories.mavenInstaller) {
  pom.project {
    inceptionYear '2015'
    packaging 'jar'
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives jar
 // archives sourcesJar
}

// don't try to deploy SNAPSHOT versions in CI
tasks.findByName("artifactoryPublish")?.with { task ->
  if (version ==~ /.*-SNAPSHOT/){
    task.enabled = false
  }
}